// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================================================
 * ENUMS
 * ===========================================================
 */

enum UsuarioTokenTipo {
  activate_account
  update_pass
}

/**
 * ===========================================================
 * CATÁLOGOS Y ORGANIZACIÓN
 * ===========================================================
 */

model Empresa {
  id          String  @id @default(uuid()) @db.Uuid
  nombre      String
  razonSocial String?
  ruc         String?

  // auditoría
  uc String? // usuario creación
  fc DateTime @default(now()) @db.Timestamptz(6) // fecha creación
  um String? // usuario modificación
  fm DateTime @updatedAt @db.Timestamptz(6) // fecha modificación

  // relaciones
  sedes         Sede[]
  departamentos Departamento[]
  usuarios      Usuario[]
  etapas        Etapa[]      
  vacantes      Vacante[]
  procesos      Proceso[]   
  diasNoLaborales DiaNoLaboral[]   

  @@unique([nombre])
  @@map("Empresa")
}

model Sede {
  id        String  @id @default(uuid()) @db.Uuid
  empresaId String  @db.Uuid
  nombre    String
  codigo    String?
  direccion String?
  ciudad    String?
  region    String?
  pais      String?
  timezone  String?

  // auditoría
  uc String? // usuario creación
  fc DateTime @default(now()) @db.Timestamptz(6) // fecha creación
  um String? // usuario modificación
  fm DateTime @updatedAt @db.Timestamptz(6) // fecha modificación

  empresa    Empresa      @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  usuarios   Usuario[]

  @@unique([empresaId, nombre])
  @@index([empresaId])
  @@map("Sede")
}

model Departamento {
  id        String  @id @default(uuid()) @db.Uuid
  empresaId String  @db.Uuid
  nombre    String
  codigo    String?
  parentId  String? @db.Uuid

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa    Empresa        @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  parent     Departamento?  @relation("DepartamentoToDepartamento", fields: [parentId], references: [id], onDelete: SetNull)
  children   Departamento[] @relation("DepartamentoToDepartamento")
  usuarios   Usuario[]
  vacantes   Vacante[] 

  // Departamentos GLOBALes por empresa
  @@unique([empresaId, nombre])
  @@index([empresaId, parentId])
  @@map("Departamento")
}

/**
 * ===========================================================
 * USUARIOS Y SEGURIDAD
 * ===========================================================
 */

model Usuario {
  id             String  @id @default(uuid()) @db.Uuid
  empresaId      String  @db.Uuid
  rolId          String? @db.Uuid
  departamentoId String? @db.Uuid
  sedeId         String? @db.Uuid

  username String
  password String   // hash de la contraseña
  email    String
  nombre   String?
  apellido String?
  telefono String?
  activo   Boolean @default(true)
  lastLogin DateTime? @db.Timestamptz(6)

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa      Empresa       @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  rol          Rol?          @relation(fields: [rolId], references: [id], onDelete: Restrict)
  departamento Departamento? @relation(fields: [departamentoId], references: [id], onDelete: SetNull)
  sede         Sede?         @relation(fields: [sedeId], references: [id], onDelete: SetNull)
  tokens       UsuarioToken[]

  // Unicidad por empresa para username y email (multi-tenant)
  @@unique([empresaId, username])
  @@unique([empresaId, email])
  @@index([empresaId])
  @@index([departamentoId])
  @@index([sedeId])
  @@index([rolId])
  @@map("Usuario")
}

model Rol {
  id          String  @id @default(uuid()) @db.Uuid
  nombre      String
  descripcion String?

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  usuarios Usuario[]

  @@unique([nombre])
  @@map("Rol")
}

model Captcha {
  id         String   @id @default(uuid()) @db.Uuid
  ip         String                                  // IP del cliente que solicitó el captcha
  challenge  String                                  // identificador/valor del reto (p.ej. UUID o token)
  
  // auditoría
  fc DateTime @default(now()) @db.Timestamptz(6)

  @@unique([challenge, ip])
  @@index([ip])
  @@map("Captcha")
}

model UsuarioToken {
  id         String           @id @default(uuid()) @db.Uuid   // el propio token
  usuarioId  String           @db.Uuid
  tipo       UsuarioTokenTipo
  fc         DateTime         @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime         @db.Timestamptz(6)

  usuario    Usuario          @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([expiresAt])
  @@index([tipo])
  @@map("Usuario_Token")
}


// ===== Karaku =====
enum VacanteEstado {
  abierta
  pausada
  cerrada
  cancelada
}

model Etapa {
  id        String  @id @default(uuid()) @db.Uuid
  empresaId String  @db.Uuid
  nombre    String
  slaDias   Int
  activo    Boolean @default(true)

  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  procesosEtapas ProcesoEtapa[]

  @@unique([empresaId, nombre])
  @@index([empresaId, activo])
  @@index([empresaId])
  @@map("Etapa")
}

model Proceso {
  id        String  @id @default(uuid()) @db.Uuid
  empresaId String  @db.Uuid
  nombre    String
  descripcion String?
  activo    Boolean @default(true)

  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  etapas  ProcesoEtapa[]
  vacantes Vacante[]

  @@unique([empresaId, nombre])
  @@index([empresaId, activo])
  @@map("Proceso")
}

model ProcesoEtapa {
  id        String  @id @default(uuid()) @db.Uuid
  procesoId String  @db.Uuid
  etapaId   String  @db.Uuid
  orden     Int

  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  proceso Proceso @relation(fields: [procesoId], references: [id], onDelete: Cascade)
  etapa   Etapa   @relation(fields: [etapaId], references: [id], onDelete: Restrict)
  // Lado opuesto para el uso en vacantes:
  vacantesEtapas VacanteEtapa[]

  @@unique([procesoId, orden])
  @@index([procesoId])
  @@index([etapaId])
  @@unique([procesoId, etapaId])
  @@map("Proceso_Etapa")
}

model Vacante {
  id             String  @id @default(uuid()) @db.Uuid
  empresaId      String  @db.Uuid
  procesoId      String  @db.Uuid
  nombre         String
  fechaInicio    DateTime? @db.Date
  departamentoId String?   @db.Uuid
  estado         VacanteEstado @default(abierta)
  activo         Boolean @default(true)

  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa      Empresa       @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  proceso      Proceso       @relation(fields: [procesoId], references: [id], onDelete: Restrict)
  departamento Departamento? @relation(fields: [departamentoId], references: [id], onDelete: SetNull)

  etapasVacante VacanteEtapa[]

  @@index([empresaId])
  @@index([empresaId, procesoId])
  @@index([empresaId, estado])
  @@index([empresaId, activo])
  @@map("Vacante")
}

model VacanteEtapa {
  id             String  @id @default(uuid()) @db.Uuid
  vacanteId      String  @db.Uuid
  procesoEtapaId String  @db.Uuid
  fechaInicio          DateTime? @db.Date
  fechaFinalizacion    DateTime? @db.Date
  fechaCumplimiento    DateTime? @db.Date
  comentarios    String?
  recursos       String?

  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  vacante       Vacante      @relation(fields: [vacanteId], references: [id], onDelete: Cascade)
  procesoEtapa  ProcesoEtapa @relation(fields: [procesoEtapaId], references: [id], onDelete: Restrict)

  // Evita duplicar una misma fila del proceso en la vacante
  @@unique([vacanteId, procesoEtapaId])
  @@index([vacanteId])
  @@index([procesoEtapaId])
  @@map("Vacante_Etapa")
}

enum DiaNoLaboralTipo {
  nacional
  empresa
}

model DiaNoLaboral {
  id        String           @id @default(uuid()) @db.Uuid
  tipo      DiaNoLaboralTipo
  empresaId String  @db.Uuid   // null si es nacional, obligatorio si es de empresa
  nombre    String
  fecha     DateTime @db.Date

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict)

  @@index([tipo])
  @@index([empresaId])
  @@index([fecha])
  @@unique([empresaId, nombre, fecha])
  @@index([tipo, nombre, fecha])
  @@map("Dia_No_Laboral")
}