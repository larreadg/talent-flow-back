// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================================================
 * CATÁLOGOS Y ORGANIZACIÓN
 * ===========================================================
 */

model Empresa {
  id          String  @id @default(uuid()) @db.Uuid
  nombre      String
  razonSocial String?
  ruc         String?

  // auditoría
  uc String? // usuario creación
  fc DateTime @default(now()) @db.Timestamptz(6) // fecha creación
  um String? // usuario modificación
  fm DateTime @updatedAt @db.Timestamptz(6) // fecha modificación

  // relaciones
  sedes         Sede[]
  departamentos Departamento[]
  usuarios      Usuario[]

  @@unique([nombre])
  @@map("Empresa")
}

model Sede {
  id        String  @id @default(uuid()) @db.Uuid
  empresaId String  @db.Uuid
  nombre    String
  codigo    String?
  direccion String?
  ciudad    String?
  region    String?
  pais      String?
  timezone  String?

  // auditoría
  uc String? // usuario creación
  fc DateTime @default(now()) @db.Timestamptz(6) // fecha creación
  um String? // usuario modificación
  fm DateTime @updatedAt @db.Timestamptz(6) // fecha modificación

  empresa    Empresa      @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  usuarios   Usuario[]

  @@unique([empresaId, nombre])
  @@index([empresaId])
  @@map("Sede")
}

model Departamento {
  id        String  @id @default(uuid()) @db.Uuid
  empresaId String  @db.Uuid
  nombre    String
  codigo    String?
  parentId  String? @db.Uuid

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa    Empresa        @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  parent     Departamento?  @relation("DepartamentoToDepartamento", fields: [parentId], references: [id], onDelete: SetNull)
  children   Departamento[] @relation("DepartamentoToDepartamento")
  usuarios   Usuario[]

  // Departamentos GLOBALes por empresa
  @@unique([empresaId, nombre])
  @@index([empresaId, parentId])
  @@map("Departamento")
}

/**
 * ===========================================================
 * USUARIOS Y SEGURIDAD
 * ===========================================================
 */

model Usuario {
  id             String  @id @default(uuid()) @db.Uuid
  empresaId      String  @db.Uuid
  rolId          String? @db.Uuid
  departamentoId String? @db.Uuid
  sedeId         String? @db.Uuid

  username String
  password String   // hash de la contraseña
  email    String
  nombre   String?
  apellido String?
  telefono String?
  activo   Boolean @default(true)
  lastLogin DateTime? @db.Timestamptz(6)

  token String? @default(uuid()) @db.Uuid
  tokenExpiracion DateTime? @db.Timestamptz(6)

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  empresa      Empresa       @relation(fields: [empresaId], references: [id], onDelete: Restrict)
  rol          Rol?          @relation(fields: [rolId], references: [id], onDelete: Restrict)
  departamento Departamento? @relation(fields: [departamentoId], references: [id], onDelete: SetNull)
  sede         Sede?         @relation(fields: [sedeId], references: [id], onDelete: SetNull)

  // Unicidad por empresa para username y email (multi-tenant)
  @@unique([empresaId, username])
  @@unique([empresaId, email])
  @@index([empresaId])
  @@index([departamentoId])
  @@index([sedeId])
  @@index([rolId])
  @@map("Usuario")
}

model Rol {
  id          String  @id @default(uuid()) @db.Uuid
  nombre      String
  descripcion String?

  // auditoría
  uc String?
  fc DateTime @default(now()) @db.Timestamptz(6)
  um String?
  fm DateTime @updatedAt @db.Timestamptz(6)

  usuarios Usuario[]

  @@unique([nombre])
  @@map("Rol")
}

model Captcha {
  id         String   @id @default(uuid()) @db.Uuid
  ip         String                                  // IP del cliente que solicitó el captcha
  challenge  String                                  // identificador/valor del reto (p.ej. UUID o token)
  
  // auditoría
  fc DateTime @default(now()) @db.Timestamptz(6)

  @@unique([challenge, ip])
  @@index([ip])
  @@map("Captcha")
}